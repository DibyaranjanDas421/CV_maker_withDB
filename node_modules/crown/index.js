const { Command, Option } = require("commander");
const fs = require("fs-extra");
const path = require("path");
const simpleGit = require("simple-git");
const { execSync } = require("child_process");
const pkgJson = require("./package.json");

const pnpmWorkspaceYaml = `packages:
  - 'crown/**'
  - 'shop'
`;
const gitignore = `node_modules`;

const program = new Command();

program
  .name("crown")
  .description("CLI for Crown Framework")
  .version(pkgJson.version);

program
  .command("init")
  .description("Initialize a new Crown project")
  .argument("<name>", "shop name")
  .addOption(
    new Option("-t, --template <template>", "Which template to use")
      .choices(["sapper", "v2"])
      .default("v2")
  )
  .action(async (name, options) => {
    const { template } = options;
    console.log("âœ¨ Initializing", name, "using template", template);

    const root = path.resolve(process.cwd(), name);

    if (fs.existsSync(root)) {
      console.error("The folder", name, "already exists");
      process.exit(1);
    }

    console.log("ðŸ’¼ Creating folder...", root);
    fs.mkdirSync(root);
    process.chdir(root);

    console.log("ðŸ“‹ Creating pnpm-workspace.yaml and .gitignore");
    fs.writeFileSync(
      path.resolve(root, "pnpm-workspace.yaml"),
      pnpmWorkspaceYaml
    );
    fs.writeFileSync(path.resolve(root, ".gitignore"), gitignore);

    const git = simpleGit({
      baseDir: root,
    });

    await git.init();

    try {
      console.log("ðŸ‘¯ Cloning", template, "template...");
      const tmpDir = path.resolve(root, "tmp");
      fs.mkdirSync(tmpDir);
      await git.clone(`git@github.com:CrownFramework/Crown.git`, tmpDir, {
        "--depth": 1,
        "--filter": "blob:none",
        "--sparse": true,
      });
      execSync(`git sparse-checkout set templates/${template}`, {
        cwd: tmpDir,
      });
      fs.moveSync(
        path.resolve(tmpDir, "templates", template),
        path.resolve(root, "shop")
      );
      fs.rmSync(tmpDir, { recursive: true, force: true });
    } catch (e) {
      console.error("Could not clone template:", e);
      process.exit(1);
    }

    try {
      console.log("ðŸ“© Making initial commit...");
      await git.add(".").commit("Initial commit");
    } catch (e) {
      console.error("Failed to commit:", e);
      process.exit(1);
    }

    try {
      console.log("ðŸ‘‘ Cloning Crown...");
      execSync(
        `git subrepo clone git@github.com:CrownFramework/Crown.git ./crown -b main`
      );
    } catch (e) {
      console.log("Failed to install Crown.");
      process.exit(1);
    }

    try {
      console.log("ðŸ›   Running pnpm install...");
      execSync("pnpm i");
    } catch (e) {
      console.error("Install failed", e);
      console.error(e.stdout.toString());
      process.exit(1);
    }

    console.log("âœ… Done!");
  });

program.parse();
